// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using idp.Dal;

namespace idp.Dal.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191112104412_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("idp.Dal.Models.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityFormId");

                    b.Property<DateTime?>("Changed");

                    b.Property<string>("Code");

                    b.Property<string>("ContactAddress");

                    b.Property<string>("ContactPhone");

                    b.Property<string>("ContactPhoneMain");

                    b.Property<string>("ConvoyDescription");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatorName");

                    b.Property<int>("DAgeCategoryId");

                    b.Property<int?>("DExternalHelpFormId");

                    b.Property<int?>("DExternalInstitutionTypeId");

                    b.Property<int?>("DHelpFormId");

                    b.Property<int?>("DInformationSourceId");

                    b.Property<int?>("DInvalidFormId");

                    b.Property<int?>("DLivingConditionId");

                    b.Property<int>("DLivingPlaceId");

                    b.Property<int>("DNationalityId");

                    b.Property<int?>("DNeedId");

                    b.Property<int?>("DNotLawHelpId");

                    b.Property<int?>("DProblemId");

                    b.Property<int?>("DTimeSinceRelocationId");

                    b.Property<int?>("DVpoAgentId");

                    b.Property<int>("DVpoOrVictimOfConflictId");

                    b.Property<int?>("DVulnerabilityId");

                    b.Property<string>("DocumentCreationDescription");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalInstitution");

                    b.Property<int>("FamilyAdults");

                    b.Property<int>("FamilyChildren");

                    b.Property<int>("FamilyFemales");

                    b.Property<int>("FamilyMales");

                    b.Property<int>("FamilyMembers");

                    b.Property<int>("FamilyOld");

                    b.Property<string>("Fio")
                        .HasMaxLength(50);

                    b.Property<int>("HelpReceivedFromHumanitarian");

                    b.Property<int>("HomeTypeId");

                    b.Property<string>("HomeType_Other");

                    b.Property<string>("InformationSourceIds_Other");

                    b.Property<int>("InsideOfficeNo");

                    b.Property<int?>("InvalidGroup");

                    b.Property<bool>("IsAnyHelpOnFirstContact");

                    b.Property<bool>("IsCloseToBorder");

                    b.Property<bool>("IsIn15KmFromBorder");

                    b.Property<bool>("IsOnVpo");

                    b.Property<bool>("IsRedirectFromExternal");

                    b.Property<string>("LawConsultancyDescription");

                    b.Property<string>("LivingConditions_Other");

                    b.Property<int>("MaintenanceDisabled");

                    b.Property<int>("MaintenanceMinor");

                    b.Property<int>("MaintenanceOld");

                    b.Property<int?>("MeetingTypeId");

                    b.Property<string>("MeetingType_Other");

                    b.Property<string>("MultipleNationality");

                    b.Property<int>("OfficeId");

                    b.Property<string>("OrganizationName");

                    b.Property<int>("PIAreaId");

                    b.Property<int?>("PILocalityId");

                    b.Property<int>("PIRegionId");

                    b.Property<int>("PPAreaId");

                    b.Property<int?>("PPLocalityId");

                    b.Property<int>("PPRegionId");

                    b.Property<int>("PollAreaId");

                    b.Property<DateTime>("PollDate");

                    b.Property<string>("PollInstitution");

                    b.Property<int>("PollLocalityId");

                    b.Property<int>("PollRegionId");

                    b.Property<string>("ProblemDescription");

                    b.Property<int>("Sex");

                    b.Property<string>("SocialNetworks");

                    b.Property<int>("SocialStatusId");

                    b.Property<string>("SocialStatus_Other");

                    b.Property<int>("Status");

                    b.Property<string>("UserRole");

                    b.Property<string>("VpoAgentFio");

                    b.Property<string>("VpoAgentPhone");

                    b.Property<string>("VpoAgent_Other");

                    b.Property<DateTime?>("VpoIssuedDate");

                    b.Property<string>("VpoIssuedInstitute");

                    b.Property<string>("VpoNumber");

                    b.Property<string>("VpoOrVictimOfConflict_Other");

                    b.Property<string>("Vulnerability_Other");

                    b.HasKey("Id");

                    b.HasIndex("ActivityFormId");

                    b.HasIndex("DAgeCategoryId");

                    b.HasIndex("DExternalHelpFormId");

                    b.HasIndex("DExternalInstitutionTypeId");

                    b.HasIndex("DHelpFormId");

                    b.HasIndex("DInformationSourceId");

                    b.HasIndex("DInvalidFormId");

                    b.HasIndex("DLivingConditionId");

                    b.HasIndex("DLivingPlaceId");

                    b.HasIndex("DNationalityId");

                    b.HasIndex("DNeedId");

                    b.HasIndex("DNotLawHelpId");

                    b.HasIndex("DProblemId");

                    b.HasIndex("DTimeSinceRelocationId");

                    b.HasIndex("DVpoAgentId");

                    b.HasIndex("DVpoOrVictimOfConflictId");

                    b.HasIndex("DVulnerabilityId");

                    b.HasIndex("HomeTypeId");

                    b.HasIndex("MeetingTypeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PIAreaId");

                    b.HasIndex("PILocalityId");

                    b.HasIndex("PIRegionId");

                    b.HasIndex("PPAreaId");

                    b.HasIndex("PPLocalityId");

                    b.HasIndex("PPRegionId");

                    b.HasIndex("PollAreaId");

                    b.HasIndex("PollLocalityId");

                    b.HasIndex("PollRegionId");

                    b.HasIndex("SocialStatusId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DActivityForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ActivityForms");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DAgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AgeCategories");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DExternalHelpForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ExternalHelpForms");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DExternalInstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ExternalInstitutionTypes");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DHelpForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("HelpForms");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DHomeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("HomeTypes");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DInformationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InformationSources");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DInvalidForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InvalidForms");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DLivingCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LivingConditions");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DLivingPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LivingPlaces");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DLocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.Property<int>("Status");

                    b.Property<int>("TerritoryControl");

                    b.Property<string>("UNHCRInterventionZone");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("Code", "TerritoryControl")
                        .IsUnique()
                        .HasName("IX_Localities_Code_TerritoryControl");

                    b.ToTable("Localities");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DMeetingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MeetingTypes");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Needs");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DNotLawHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DNotLawHelps");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaId");

                    b.Property<int?>("BenStartNo");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DProblem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DRedirectResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("RedirectResults");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<int>("TerritoryControl");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("Code", "TerritoryControl")
                        .IsUnique()
                        .HasName("IX_Regions_Code_TerritoryControl");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DSocialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("SocialStatuses");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DTimeSinceRelocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TimeSinceRelocations");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DVpoAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("VpoAgents");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DVpoOrVictimOfConflict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("VpoOrVictimOfConflicts");
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DVulnerability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Group");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Vulnerabilities");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryConvoyProblems", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("ConvoyProblemId");

                    b.HasKey("BeneficiaryId", "ConvoyProblemId");

                    b.HasIndex("ConvoyProblemId");

                    b.ToTable("BeneficiaryConvoyProblems");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryDocProblems", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("DocProblemId");

                    b.HasKey("BeneficiaryId", "DocProblemId");

                    b.HasIndex("DocProblemId");

                    b.ToTable("BeneficiaryDocProblems");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryExternalHelpForm", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("ExternalHelpId");

                    b.HasKey("BeneficiaryId", "ExternalHelpId");

                    b.HasIndex("ExternalHelpId");

                    b.ToTable("BeneficiaryExternalHelpForm");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryHelpForm", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("HelpId");

                    b.HasKey("BeneficiaryId", "HelpId");

                    b.HasIndex("HelpId");

                    b.ToTable("BeneficiaryHelpForm");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryInformationSourse", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("InfomationSourceId");

                    b.HasKey("BeneficiaryId", "InfomationSourceId");

                    b.HasIndex("InfomationSourceId");

                    b.ToTable("BeneficiaryInformationSourse");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryLawProblems", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("LawProblemId");

                    b.HasKey("BeneficiaryId", "LawProblemId");

                    b.HasIndex("LawProblemId");

                    b.ToTable("BeneficiaryLawProblems");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryLivingCondition", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("ConditionId");

                    b.HasKey("BeneficiaryId", "ConditionId");

                    b.HasIndex("ConditionId");

                    b.ToTable("BeneficiaryLivingCondition");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryNeed", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("NeedId");

                    b.HasKey("BeneficiaryId", "NeedId");

                    b.HasIndex("NeedId");

                    b.ToTable("BeneficiaryNeed");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryNotLawHelp", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("NotLawHelpId");

                    b.HasKey("BeneficiaryId", "NotLawHelpId");

                    b.HasIndex("NotLawHelpId");

                    b.ToTable("BeneficiaryNotLawHelp");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryProblems", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("ProblemId");

                    b.HasKey("BeneficiaryId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("BeneficiaryProblems");
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryVulnerability", b =>
                {
                    b.Property<int>("BeneficiaryId");

                    b.Property<int>("VulnerabilityId");

                    b.HasKey("BeneficiaryId", "VulnerabilityId");

                    b.HasIndex("VulnerabilityId");

                    b.ToTable("BeneficiaryVulnerability");
                });

            modelBuilder.Entity("idp.Dal.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("access_token");

                    b.Property<DateTime>("expires_in");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("idp.Dal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Fio");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("idp.Dal.Models.Beneficiary", b =>
                {
                    b.HasOne("idp.Dal.Models.Dictionaries.DActivityForm", "ActivityForm")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ActivityFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DAgeCategory", "DAgeCategory")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DAgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DExternalHelpForm")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DExternalHelpFormId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DExternalInstitutionType", "DExternalInstitutionType")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DExternalInstitutionTypeId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DHelpForm")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DHelpFormId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DInformationSource")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DInformationSourceId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DInvalidForm", "DInvalidForm")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DInvalidFormId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DLivingCondition")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DLivingConditionId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DLivingPlace", "DLivingPlace")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DLivingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DNationality", "DNationality")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DNationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DNeed")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DNeedId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DNotLawHelp")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DNotLawHelpId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DProblem")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DProblemId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DTimeSinceRelocation", "DTimeSinceRelocation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DTimeSinceRelocationId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DVpoAgent", "DVpoAgent")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DVpoAgentId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DVpoOrVictimOfConflict", "DVpoOrVictimOfConflict")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DVpoOrVictimOfConflictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DVulnerability")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DVulnerabilityId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DHomeType", "HomeType")
                        .WithMany()
                        .HasForeignKey("HomeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DMeetingType", "MeetingType")
                        .WithMany()
                        .HasForeignKey("MeetingTypeId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DOffice", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "PIArea")
                        .WithMany()
                        .HasForeignKey("PIAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DLocality", "PILocality")
                        .WithMany()
                        .HasForeignKey("PILocalityId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DRegion", "PIRegion")
                        .WithMany()
                        .HasForeignKey("PIRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "PPArea")
                        .WithMany()
                        .HasForeignKey("PPAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DLocality", "PPLocality")
                        .WithMany()
                        .HasForeignKey("PPLocalityId");

                    b.HasOne("idp.Dal.Models.Dictionaries.DRegion", "PPRegion")
                        .WithMany()
                        .HasForeignKey("PPRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "PollArea")
                        .WithMany()
                        .HasForeignKey("PollAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DLocality", "PollLocality")
                        .WithMany()
                        .HasForeignKey("PollLocalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DRegion", "PollRegion")
                        .WithMany()
                        .HasForeignKey("PollRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DSocialStatus", "SocialStatus")
                        .WithMany()
                        .HasForeignKey("SocialStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DLocality", b =>
                {
                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DOffice", b =>
                {
                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Dictionaries.DRegion", b =>
                {
                    b.HasOne("idp.Dal.Models.Dictionaries.DArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryConvoyProblems", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryConvoyProblems")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DProblem", "ConvoyProblem")
                        .WithMany()
                        .HasForeignKey("ConvoyProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryDocProblems", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryDocProblems")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DProblem", "DocProblem")
                        .WithMany()
                        .HasForeignKey("DocProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryExternalHelpForm", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryExternalHelpForms")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DExternalHelpForm", "ExternalHelp")
                        .WithMany()
                        .HasForeignKey("ExternalHelpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryHelpForm", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryHelpForms")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DHelpForm", "Help")
                        .WithMany()
                        .HasForeignKey("HelpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryInformationSourse", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryInformationSource")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DInformationSource", "InfomationSource")
                        .WithMany()
                        .HasForeignKey("InfomationSourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryLawProblems", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryLawProblems")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DProblem", "LawProblem")
                        .WithMany()
                        .HasForeignKey("LawProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryLivingCondition", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryLivingConditions")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DLivingCondition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryNeed", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryNeeds")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DNeed", "Need")
                        .WithMany()
                        .HasForeignKey("NeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryNotLawHelp", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryNotLawHelps")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DNotLawHelp", "NotLawHelp")
                        .WithMany()
                        .HasForeignKey("NotLawHelpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryProblems", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryProblems")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DProblem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("idp.Dal.Models.Relationships.BeneficiaryVulnerability", b =>
                {
                    b.HasOne("idp.Dal.Models.Beneficiary", "Beneficiary")
                        .WithMany("BeneficiaryVulnerabilities")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("idp.Dal.Models.Dictionaries.DVulnerability", "Vulnerability")
                        .WithMany()
                        .HasForeignKey("VulnerabilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
